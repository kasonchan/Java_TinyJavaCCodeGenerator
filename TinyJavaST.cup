import java_cup.runtime.*;

action code {: SymbolTable classes, newClass, currentClass; String outerEnv = "Class", middleEnv = "Class", innerEnv = "Class", env, t = "classes"; Boolean iArray = false, newC = false, printVar = false; String temp; int len; :};

terminal ID, INTEGER;
terminal AND, OR, NOT;
terminal LT, LE, GT, GE, EQ, NE;
terminal PLUS, MINUS, TIMES, SLASH;
terminal SEMICOLON, DOT, COMMA;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, ASSIGN;
terminal ARGS, BOOLEAN, CLASS, ELSE, FALSE, IF, IMPORT, IN, INT, JAVA, MAIN;
terminal NEXTINT, NEW, OUT, PRINTLN, PUBLIC, RETURN, SCANNER, STATIC, STRING; 
terminal SYSTEM, THIS, TRUE, UTIL, VOID, WHILE;

non terminal program;
non terminal classDefinitionList;
non terminal classDefinition;
non terminal SymbolTable memberList;
non terminal memberDeclaration;
non terminal memberDeclarator;
non terminal staticOption;
non terminal functionDefinition;
non terminal functionDeclaration;
non terminal SymbolTable variableDeclarationList;
non terminal variableDeclaration;
non terminal arrayDeclaration;
non terminal subscriptDeclarationList;
non terminal dimensionList;
non terminal mainDeclaration;
non terminal scannerDeclarationOption;
non terminal SymbolTable type;
non terminal argumentDeclarationListOption;
non terminal argumentDeclarationList;
non terminal argumentDeclaration;
non terminal compoundStatement;
non terminal statementListOption;
non terminal statementList;
non terminal statement;
non terminal assignmentStatement;
non terminal returnStatementOption;
non terminal elseOption;
non terminal expressionListOption;
non terminal expressionList;
non terminal expression;
non terminal andExpression;
non terminal relationalExpression;
non terminal arithmeticExpression;
non terminal term;
non terminal factor;
non terminal primaryExpression;
non terminal addingOperator;
non terminal multiplyingOperator;
non terminal relationalOperator;
non terminal unaryOperator;
non terminal object;
non terminal variable;
non terminal subscriptList;
non terminal functionCall;
non terminal classId;
non terminal objectId;
non terminal functionId;

non terminal parameterId;

start with program;

program ::= 
  {: 
    currentClass = classes;         /* save current env */
    classes = new SymbolTable (); /* start new scope */
    classes.InsertEnv("Class");
    classes.AppendString("#include <stdio.h>\n#include <stdlib.h>\n\n");
  :}
  IMPORT JAVA DOT UTIL DOT TIMES SEMICOLON  
  classDefinitionList
  {: 
    RESULT = classes; classes = currentClass; /* restore env */ 
  :}
  ;

classDefinitionList ::= 
  classDefinition | classDefinitionList classDefinition
  ;

classDefinition ::= CLASS classId LBRACE {: newC = true; :} memberList RBRACE ;

classId ::= ID:id
  {: 
    innerEnv = id.toString();
    middleEnv = id.toString();

    classes.InsertEnv(id.toString());
    if(classes.FoundEntry(id.toString()) == false)
      classes.InsertEntry(id.toString(), "Class", "classes", "classes"); 
    
    if(t.equals("cId"))
      t = id.toString();

    innerEnv = id.toString();
    middleEnv = id.toString();
  :}
  ;

memberList ::= memberList memberDeclaration | ;

memberDeclaration ::= memberDeclarator SEMICOLON {: classes.AppendString(";\n"); :} |   
  functionDefinition 
  ;

memberDeclarator ::= staticOption variableDeclaration ;

staticOption ::= STATIC | ;

functionDefinition ::= functionDeclaration LBRACE {: classes.AppendString("{\n"); :}
  variableDeclarationList statementList returnStatementOption RBRACE {: classes.AppendString("}\n"); :}
  | functionDeclaration LBRACE {: classes.AppendString("{\n"); :} 
  statementList returnStatementOption RBRACE {: classes.AppendString("}\n"); :}
  | functionDeclaration LBRACE {: classes.AppendString("{\n"); :} 
  variableDeclarationList returnStatementOption RBRACE {: classes.AppendString("}\n"); :}
  | functionDeclaration LBRACE {: classes.AppendString("{\n"); :} 
  returnStatementOption RBRACE {: classes.AppendString("}\n"); :}
  ;

functionDeclaration ::= 
  PUBLIC type functionId LPAREN {: classes.AppendString("("); :} argumentDeclarationListOption RPAREN {: classes.AppendString(")"); :}
  | PUBLIC STATIC type functionId LPAREN {: classes.AppendString("("); :} argumentDeclarationListOption RPAREN {: classes.AppendString(")"); :}
  | mainDeclaration 
  ;

variableDeclarationList ::= variableDeclaration SEMICOLON {: classes.AppendString(";\n"); :}
  | variableDeclarationList variableDeclaration SEMICOLON {: classes.AppendString(";\n"); :} ; 

variableDeclaration ::= type objectId | 
  type objectId arrayDeclaration 
  ;

arrayDeclaration ::= subscriptDeclarationList ASSIGN NEW INT dimensionList ;

subscriptDeclarationList ::= subscriptDeclarationList LBRACK RBRACK | ;

dimensionList ::= dimensionList LBRACK {: classes.AppendString("["); :} 
  INTEGER:integer {: classes.AppendString(integer.toString()); :} RBRACK {: classes.AppendString("] "); :} 
  | LBRACK {: classes.AppendString("["); :} INTEGER:integer {: classes.AppendString(integer.toString()); :} 
  RBRACK {: classes.AppendString("] "); :};

mainDeclaration 
  ::= 
  STATIC SCANNER IN:id
  {:
    t = "Scanner";
    if(classes.FoundEntry("in") == false)
      classes.InsertEntry("in", middleEnv, "Scanner", t);
  :}
  ASSIGN NEW SCANNER LPAREN SYSTEM DOT IN RPAREN SEMICOLON
  PUBLIC STATIC VOID MAIN 
  {: 
    classes.InsertEnv("main");

    if(classes.FoundEntry("main") == false)
      classes.InsertEntry("main", middleEnv, "function", t);
    innerEnv = "main";

    classes.AppendString("int main");
  :}
  LPAREN {: classes.AppendString("("); :} STRING {: classes.AppendString("int argc, char * argv[]"); :} ARGS LBRACK RBRACK RPAREN {: classes.AppendString(") "); :}
  | PUBLIC STATIC VOID MAIN 
  {: 
    classes.InsertEnv("main");

    if(classes.FoundEntry("main") == false)
      classes.InsertEntry("main", middleEnv, "function", t);
    innerEnv = "main";

    classes.AppendString("int main");
  :}
  LPAREN {: classes.AppendString("("); :} STRING {: classes.AppendString("int argc, char * argv[]"); :} ARGS LBRACK RBRACK RPAREN {: classes.AppendString(") "); :} ;

type ::= classId {: t = innerEnv; :} | 
  INT {: t = "integer"; classes.AppendString("int "); :} | 
  BOOLEAN {: t = "boolean"; :} ;

argumentDeclarationListOption ::= argumentDeclarationList | ;

argumentDeclarationList ::= argumentDeclarationList COMMA {: classes.AppendString(", "); :} argumentDeclaration | argumentDeclaration ;

argumentDeclaration ::= type parameterId subscriptDeclarationList ;

compoundStatement ::= LBRACE {: classes.AppendString("{\n"); :} statementList RBRACE {: classes.AppendString("}\n"); :} ;

statementListOption ::= statementList | ;

statementList ::= statementList statement | statement ;

statement ::= compoundStatement 
  | assignmentStatement SEMICOLON {: classes.AppendString(";\n"); :}
  | IF {: classes.AppendString("if "); :} LPAREN {: classes.AppendString("("); :} expression RPAREN {: classes.AppendString(") "); :} statement elseOption
  | WHILE {: classes.AppendString("while "); :} LPAREN {: classes.AppendString("("); :} 
  expression RPAREN {: classes.AppendString(") "); :} statement 
  | SYSTEM DOT OUT DOT PRINTLN LPAREN {: classes.AppendString("printf(\"%d\\n\", "); :}
  expression RPAREN SEMICOLON {: classes.AppendString(");\n"); :};

assignmentStatement ::= variable ASSIGN {: classes.AppendString(" = "); :} expression 
  | variable ASSIGN {: classes.AppendString(" = "); :} 
  NEW classId LPAREN {: classes.AppendString("("); :} RPAREN {: classes.AppendString(")"); :}
  | variable ASSIGN IN DOT NEXTINT LPAREN RPAREN 
  {: classes.RemoveString(len); classes.AppendString("scanf(\"%d\", &");  classes.AppendString(temp); classes.AppendString(")"); :}  
    ;

returnStatementOption ::= RETURN {: classes.AppendString("return "); :} expression SEMICOLON {: classes.AppendString(";\n"); :}| ;

elseOption ::= ELSE {: classes.AppendString("else "); :} statement | ;

expressionListOption ::= expressionList | ;

expressionList ::= expressionList COMMA {: classes.AppendString(", "); :} expression | expression ;

expression ::= expression OR {: classes.AppendString(" || "); :} andExpression | andExpression ;

andExpression ::= andExpression AND {: classes.AppendString(" && "); :} relationalExpression | relationalExpression ;

relationalExpression ::= arithmeticExpression relationalOperator arithmeticExpression | arithmeticExpression ;

relationalOperator ::= LT {: classes.AppendString(" < "); :} 
  | LE {: classes.AppendString(" <= "); :}
  | GT {: classes.AppendString(" > "); :}
  | GE {: classes.AppendString(" >= "); :}
  | EQ {: classes.AppendString(" == "); :}
  | NE {: classes.AppendString(" != "); :} ;

arithmeticExpression ::= term | arithmeticExpression addingOperator term ;

addingOperator ::= PLUS {: classes.AppendString(" + "); :} 
  | MINUS {: classes.AppendString(" - "); :};

term ::= factor | term multiplyingOperator factor ;

multiplyingOperator ::= TIMES {: classes.AppendString(" * "); :} 
  | SLASH {: classes.AppendString(" / "); :} ;

factor ::= primaryExpression | unaryOperator factor ;

unaryOperator ::= addingOperator | NOT ;

primaryExpression ::= object 
  | INTEGER:integer {: classes.AppendString(integer.toString()); :} 
  | TRUE {: classes.AppendString("true"); :}
  | FALSE {: classes.AppendString("false"); :}
  | LPAREN {: classes.AppendString("("); :} expression RPAREN {: classes.AppendString(")"); :} ;

object ::= variable  
  | functionCall ;

variable ::= THIS 
  | objectId subscriptList 
  | object DOT {: classes.AppendString(" . "); :} objectId subscriptList ;

subscriptList ::= subscriptList LBRACK {: classes.AppendString("["); :} 
  expression RBRACK {: classes.AppendString("]"); :} 
  | ;

functionCall ::= functionId LPAREN {: classes.AppendString("("); :} 
  expressionListOption RPAREN {: classes.AppendString(")"); :} 
  | object DOT {: classes.AppendString("."); :} functionId 
  LPAREN {: classes.AppendString("("); :} expressionListOption RPAREN {: classes.AppendString(") "); :}; 

parameterId ::= ID:id
  {:
    if(classes.FoundEntry(id.toString()) == false)
        classes.InsertEntry(id.toString(), innerEnv, "parameter", t);
    classes.AppendString(id.toString());
  :}
  ;

objectId ::= ID:id
  {:
    if(classes.FoundEntry(id.toString()) == false)
      classes.InsertEntry(id.toString(), innerEnv, "variable", t);
    iArray = false;

    temp = id.toString();
    len = (id.toString()).length();
    
    classes.AppendString(id.toString());
  :} 
  ;

functionId ::= ID:id
  {:
    classes.InsertEnv(id.toString());
    if(classes.FoundEntry(id.toString()) == false)
      classes.InsertEntry(id.toString(), innerEnv, "function", t);
    
    innerEnv = id.toString();
    classes.AppendString(id.toString());
  :}
  ;

